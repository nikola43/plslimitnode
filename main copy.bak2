
package main

import (
	"context"
	"crypto/ecdsa"
	"encoding/hex"
	"fmt"
	"log"
	"math/big"
	"os"
	"strings"
	"time"

	"github.com/ethereum/go-ethereum/accounts/abi"

	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/fatih/color"
	"github.com/joho/godotenv"

	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
)

type OrderResult struct {
	ShouldExecute bool
	OrderId       []byte
}

func main() {

	// load .env file variables
	err := godotenv.Load()
	if err != nil {
		panic(err)
	}
	RPC_URL, LIMIT_ADDRESS, PRIVATE_KEY := getEnvVariables()
	color.Green("Connected to %s", RPC_URL)
	client := getClient(RPC_URL)

	// import wallet
	walletAddress, privateKey := importWallet(PRIVATE_KEY)
	fmt.Println(color.YellowString("Wallet Address"), color.CyanString(walletAddress.Hex()))
	walletBalance, err := client.BalanceAt(context.Background(), walletAddress, nil)
	if err != nil {
		panic(err)
	}
	_ = privateKey
	fmt.Println(color.YellowString("Wallet Balance"), color.CyanString(walletBalance.String()))
	nonce, err := client.PendingNonceAt(context.Background(), walletAddress)
	if err != nil {
		panic(err)
	}

	for {
		fmt.Println(color.YellowString("Nonce"), color.CyanString(fmt.Sprintf("%d", nonce)))
		shouldExecute, order := getContractOrder(client, LIMIT_ADDRESS)
		if !shouldExecute {
			fmt.Println(color.YellowString("No orders to process"))
			time.Sleep(1 * time.Second)
			continue
		}

		fmt.Println(color.YellowString("Order to process"), color.CyanString(fmt.Sprintf("%d", len(order))))

		tx, err := performUpkeepRaw(client, order, walletAddress, privateKey, common.HexToAddress(LIMIT_ADDRESS), nonce)
		if err != nil {
			fmt.Println(color.RedString("Error processing order"))
			time.Sleep(1 * time.Second)
			continue
		}

		fmt.Println(color.YellowString("Transaction Hash"), color.CyanString(tx.Hash().Hex()))
		WaitMined(client, tx.Hash())
	}
}

func WaitMined(client *ethclient.Client, txHash common.Hash) {
	for {
		receipt, err := client.TransactionReceipt(context.Background(), txHash)
		if err != nil {
			if err == ethereum.NotFound {
				// Transaction not yet mined, wait and retry
				time.Sleep(3 * time.Second)
				continue
			} else {
				log.Fatalf("Failed to get transaction receipt: %v", err)
			}
		}
		if receipt != nil {
			fmt.Printf("Transaction mined in block %d with status %d\n", receipt.BlockNumber.Uint64(), receipt.Status)
			return
		}
	}
}

func NewAbiFromFile(path string) (*abi.ABI, error) {
	if _, err := os.Stat(path); os.IsNotExist(err) {
		return nil, err
	}

	body, err := os.ReadFile(path)
	if err != nil {
		return nil, err
	}

	parsedABI, err := abi.JSON(strings.NewReader(string(body)))
	if err != nil {
		return nil, err
	}

	return &parsedABI, nil
}

func getContractOrder(client *ethclient.Client, contractAddress string) (bool, []byte) {
	contractABI, err := NewAbiFromFile("abi.json")
	if err != nil {
		log.Fatal(err)
	}

	callData, err := contractABI.Pack("checkUpkeep", []byte("0x00"))
	if err != nil {
		log.Fatal(err)
	}

	contractAddresss := common.HexToAddress(contractAddress)
	msg := ethereum.CallMsg{
		To:   &contractAddresss,
		Data: callData,
	}

	result, err := client.CallContract(context.Background(), msg, nil)
	if err != nil {
		log.Fatal(err)
	}

	// Unpack the result
	//var output *big.Int
	// orderResult := make([]*OrderResult, 0)
	out, err := contractABI.Unpack("checkUpkeep", result)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(out[0])

	orderIdBytes := out[1].([]byte)
	orderId := hex.EncodeToString(orderIdBytes)
	fmt.Println(color.YellowString("OrderId"), color.CyanString(orderId))

	return out[0].(bool), orderIdBytes
}

func removeOrder(slice [][]byte, s int) [][]byte {
	return append(slice[:s], slice[s+1:]...)
}

func importWallet(pk string) (common.Address, *ecdsa.PrivateKey) {
	privateKey, err := crypto.HexToECDSA(pk)
	if err != nil {
		panic(err)
	}

	publicKey := privateKey.Public()
	publicKeyECDSA, ok := publicKey.(*ecdsa.PublicKey)
	if !ok {
		panic("cannot assert type: publicKey is not of type *ecdsa.PublicKey")
	}

	return crypto.PubkeyToAddress(*publicKeyECDSA), privateKey
}

func getEnvVariables() (string, string, string) {
	RPC_URL := os.Getenv("RPC_URL")
	LIMIT_ADDRESS := os.Getenv("LIMIT_ADDRESS")
	PRIVATE_KEY := os.Getenv("PRIVATE_KEY")
	return RPC_URL, LIMIT_ADDRESS, PRIVATE_KEY
}

func getClient(url string) *ethclient.Client {
	client, err := ethclient.Dial(url)
	if err != nil {
		fmt.Println(color.RedString("Error connecting to %s", url))
		panic(err)
	}
	return client
}

func estimateGas(client *ethclient.Client, orders [][]byte, fromAddress common.Address, contractAddress common.Address) (*big.Int, uint64, error) {

	gasPrice, err := client.SuggestGasPrice(context.Background())
	if err != nil {
		panic(err)
	}

	jsondata := `[
		{
			"inputs": [
				{
					"internalType": "bytes32[]",
					"name": "performData",
					"type": "bytes32[]"
				}
			],
			"name": "performUpkeep",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		}
	]`

	abi, err := abi.JSON(strings.NewReader(jsondata))
	if err != nil {
		panic(err)
	}

	var orders32 [][32]byte
	for _, order := range orders {
		var order32 [32]byte
		copy(order32[:], order[:32]) // Copy the first 32 bytes of the order
		orders32 = append(orders32, order32)
	}

	data, err := abi.Pack("performUpkeep", orders32)
	if err != nil {
		panic(err)
	}

	gasLimit, err := client.EstimateGas(context.Background(), ethereum.CallMsg{
		From: fromAddress,
		To:   &contractAddress,
		Data: data,
	})
	if err != nil {
		//panic(err)
		fmt.Println("The transaction would fail")
		fmt.Println(err.Error())
		return nil, 0, err
	}

	return gasPrice, gasLimit, nil
}

func performUpkeepRaw(client *ethclient.Client, order []byte, fromAddress common.Address, prv *ecdsa.PrivateKey, contractAddress common.Address, nonce uint64) (*types.Transaction, error) {

	value := big.NewInt(0) // in wei (0 eth)
	gasPrice, err := client.SuggestGasPrice(context.Background())
	if err != nil {
		panic(err)
	}

	contractABI, err := NewAbiFromFile("abi.json")
	if err != nil {
		log.Fatal(err)
	}

	data, err := contractABI.Pack("performUpkeep", order)
	if err != nil {
		panic(err)
	}

	gasLimit, err := client.EstimateGas(context.Background(), ethereum.CallMsg{
		From: fromAddress,
		To:   &contractAddress,
		Data: data,
	})
	if err != nil || gasLimit == 0 {
		//panic(err)
		fmt.Println("The transaction would fail")
		fmt.Println(err.Error())
		return nil, err
	}

	// increase gas limit by 10%
	gasLimit = gasLimit + gasLimit/30
	// increase gas price by 10%
	gasIncrement := gasPrice.Uint64() * 90 / 100
	gasPrice = gasPrice.Add(gasPrice, big.NewInt(int64(gasIncrement)))
	fmt.Println(color.YellowString("Gas gasPrice"), color.CyanString(fmt.Sprintf("%d", gasPrice)))
	//gasPrice = big.NewInt(500000000000000)

	tx := types.NewTransaction(nonce, contractAddress, value, gasLimit, gasPrice, data)
	chainID, err := client.NetworkID(context.Background())
	if err != nil {
		panic(err)
	}

	signedTx, err := types.SignTx(tx, types.NewEIP155Signer(chainID), prv)
	if err != nil {
		panic(err)
	}

	err = client.SendTransaction(context.Background(), signedTx)
	if err != nil {
		panic(err)
	}

	return signedTx, nil
}
