// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package NineInchSpotLimitPLS

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// NineInchSpotLimitPLSOrder is an auto generated low-level Go binding around an user-defined struct.
type NineInchSpotLimitPLSOrder struct {
	TargetPrice *big.Int
	AmountIn    *big.Int
	Path        []common.Address
	User        common.Address
	Slippage    uint16
	Deadline    *big.Int
}

// NineInchSpotLimitPLSMetaData contains all meta data concerning the NineInchSpotLimitPLS contract.
var NineInchSpotLimitPLSMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BoughtCredit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"slippage\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"OrderExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"OrderFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionPrice\",\"type\":\"uint256\"}],\"name\":\"OrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferCredit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adminAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetPrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path_\",\"type\":\"address[]\"},{\"internalType\":\"uint16\",\"name\":\"slippage_\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"credits_\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numCredits\",\"type\":\"uint256\"}],\"name\":\"creditPriceInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"credits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId_\",\"type\":\"bytes32\"}],\"name\":\"forceCancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"getOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"slippage\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"structNineInchSpotLimitPLS.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getOrderAt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnCredit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_creditPrice\",\"type\":\"uint256\"}],\"name\":\"setCreditPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"return_\",\"type\":\"bool\"}],\"name\":\"setReturnCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTimeCredit_\",\"type\":\"uint256\"}],\"name\":\"setTimeCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a060405234801562000010575f80fd5b5060015f819055805460ff191690556200002a33620000aa565b60058054600280546001600160a01b03191673e8e9b33696581ff785b71e388fd9ff4b51fdac9a1790557353cf9fff6195e201053d3b68bfed1824090b02726080526702c68af0bb14000060035562093a8060045574c73896721b68ce58dde039ef79e37fff164fd355016001600160a81b031990911617905562000103565b600180546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b608051614613620001235f395f8181611f69015261201d01526146135ff3fe608060405260043610610199575f3560e01c806395048d46116100dc578063cb59e5c011610087578063f2fde38b11610062578063f2fde38b1461047b578063fab6d6d01461049a578063fc6f9468146104b9578063fe5ff468146104ea575f80fd5b8063cb59e5c014610424578063d7a9a3781461043d578063ec57dd591461045c575f80fd5b8063ae182dcd116100b7578063ae182dcd146103dd578063c851cc32146103f0578063ca6358cd1461040f575f80fd5b806395048d461461038a578063ad17a0b3146103a9578063adfd4354146103c8575f80fd5b80635c975abb1161014757806373a423d01161012257806373a423d0146102e85780637489ec23146103075780638456cb59146103265780638da5cb5b1461033a575f80fd5b80635c975abb146102845780636e04ff0d146102a7578063715018a6146102d4575f80fd5b80633f4ba83a116101775780633f4ba83a146102235780634585e33b146102395780635778472a14610258575f80fd5b80630c0fa81a1461019d5780631d834409146101d85780633b1fee6c146101fa575b5f80fd5b3480156101a8575f80fd5b506101bc6101b7366004613e1d565b610515565b6040805192151583526020830191909152015b60405180910390f35b3480156101e3575f80fd5b506101ec61060f565b6040519081526020016101cf565b348015610205575f80fd5b5061020e61061f565b604080519283526020830191909152016101cf565b34801561022e575f80fd5b5061023761071c565b005b348015610244575f80fd5b50610237610253366004613ec3565b61072e565b348015610263575f80fd5b50610277610272366004613f2f565b610ccb565b6040516101cf9190613f46565b34801561028f575f80fd5b5060015460ff165b60405190151581526020016101cf565b3480156102b2575f80fd5b506102c66102c1366004613ec3565b610e6c565b6040516101cf92919061406e565b3480156102df575f80fd5b50610237611063565b3480156102f3575f80fd5b506101ec610302366004613f2f565b611074565b348015610312575f80fd5b50610237610321366004613f2f565b611086565b348015610331575f80fd5b5061023761155a565b348015610345575f80fd5b50600154610100900473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101cf565b348015610395575f80fd5b506102376103a4366004613f2f565b61156a565b3480156103b4575f80fd5b506102376103c3366004613f2f565b611993565b3480156103d3575f80fd5b506101ec60045481565b6102376103eb36600461409e565b611a09565b3480156103fb575f80fd5b5061023761040a366004614138565b61281b565b34801561041a575f80fd5b506101ec60035481565b34801561042f575f80fd5b506005546102979060ff1681565b348015610448575f80fd5b506101ec610457366004613f2f565b61286a565b348015610467575f80fd5b50610237610476366004614160565b6129a3565b348015610486575f80fd5b50610237610495366004614138565b6129dc565b3480156104a5575f80fd5b506102376104b4366004613f2f565b612a90565b3480156104c4575f80fd5b5060055461036590610100900473ffffffffffffffffffffffffffffffffffffffff1681565b3480156104f5575f80fd5b506101ec610504366004614138565b60096020525f908152604090205481565b6002546040517fd06ca61f0000000000000000000000000000000000000000000000000000000081525f91829173ffffffffffffffffffffffffffffffffffffffff9091169063d06ca61f9061057190879087906004016141ca565b5f60405180830381865afa9250505080156105cb57506040513d5f823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526105c891908101906141e2565b60015b6105d957505f905080610608565b600181600186516105ea9190614290565b815181106105fa576105fa6142a3565b602002602001015192509250505b9250929050565b5f61061a6007612b06565b905090565b5f8061062b6007612b06565b15610714575f8061063a612b0f565b90925090505f61064b43600a612b68565b90505f61066361065c84600a6143ee565b8390612b68565b90505f61067b61067485600a6143ee565b8390612b7a565b90505f6106888483612b85565b905080156106965780610699565b60015b90505b858111156106b5576106ae8682614290565b905061069c565b5f6106cc60646106c6846001612b85565b90612b7a565b90505f6106d96007612b06565b6106e4846064612b7a565b116106f9576106f4836064612b7a565b610703565b6107036007612b06565b919a91995090975050505050505050565b505f91829150565b610724612b90565b61072c612c17565b565b610736612c94565b600554610100900473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4f6e6c79204e6f64652041646d696e000000000000000000000000000000000060448201526064015b60405180910390fd5b5f6107e482840184613f2f565b90506107f1600782612d05565b610857576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4f7264657220646f6573206e6f7420657869737400000000000000000000000060448201526064016107ce565b5f818152600660209081526040808320815160c081018352815481526001820154818501526002820180548451818702810187018652818152929593948601938301828280156108db57602002820191905f5260205f20905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116108b0575b5050509183525050600382015473ffffffffffffffffffffffffffffffffffffffff8116602083015274010000000000000000000000000000000000000000900461ffff1660408083019190915260049092015460609091015281015180519192505f91829061094d5761094d6142a3565b60200260200101519050428260a0015111610bd45761096b83612d1c565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109d5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109f991906143f9565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610aff575f826060015173ffffffffffffffffffffffffffffffffffffffff1683602001516040515f6040518083038185875af1925050503d805f8114610a89576040519150601f19603f3d011682016040523d82523d5f602084013e610a8e565b606091505b5050905080610af9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c6564000000000000000000000000000000000060448201526064016107ce565b50610ba5565b606082015160208301516040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831660048201526024810191909152829182169063a9059cbb906044016020604051808303815f875af1158015610b7e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ba29190614414565b50505b60405183907f2e775cae5028266ebbe90e46ca5ce1b333eb3c28eef104c52203add626c1ada8905f90a2610cbb565b5f80610be884602001518560400151610515565b90925090506001821515148015610c00575083518110155b610c66576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f546172676574206e6f742072656163686564000000000000000000000000000060448201526064016107ce565b5f610c93612710610c8d8760800151612710610c82919061442f565b859061ffff16612b7a565b90612b68565b9050610c9e86612d1c565b610cb78686602001518760400151886060015185612d82565b5050505b505050610cc760015f55565b5050565b610d196040518060c001604052805f81526020015f8152602001606081526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f61ffff1681526020015f81525090565b610d24600783612d05565b610d8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f517565727920666f72206e6f6e6578697374656e74206f72646572000000000060448201526064016107ce565b5f82815260066020908152604091829020825160c0810184528154815260018201548184015260028201805485518186028101860187528181529295939493860193830182828015610e1057602002820191905f5260205f20905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610de5575b5050509183525050600382015473ffffffffffffffffffffffffffffffffffffffff8116602083015274010000000000000000000000000000000000000000900461ffff16604082015260049091015460609091015292915050565b5f60605f80610e7961061f565b9092509050815b8181101561101a575f610e946007836131d9565b90505f60065f8381526020019081526020015f206040518060c00160405290815f82015481526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020018280548015610f2a57602002820191905f5260205f20905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610eff575b5050509183525050600382015473ffffffffffffffffffffffffffffffffffffffff81166020808401919091527401000000000000000000000000000000000000000090910461ffff16604080840191909152600490930154606090920191909152820151908201519192505f918291610fa391610515565b90925090506001821515148015610fbb575082518110155b80610fca5750428360a0015111155b1561100357600184604051602001610fe491815260200190565b6040516020818303038152906040529850985050505050505050610608565b5050505080806110129061444a565b915050610e80565b505f868681818080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250959c929b50919950505050505050505050565b61106b612b90565b61072c5f6131e4565b5f6110806007836131d9565b92915050565b61108e612c94565b611099600782612d05565b6110ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4f7264657220646f6573206e6f7420657869737400000000000000000000000060448201526064016107ce565b5f818152600660209081526040808320815160c0810183528154815260018201548185015260028201805484518187028101870186528181529295939486019383018282801561118357602002820191905f5260205f20905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611158575b5050509183525050600382015473ffffffffffffffffffffffffffffffffffffffff8116602083015274010000000000000000000000000000000000000000900461ffff16604082015260049091015460609091015290503373ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff1614611274576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c69642061636365737300000000000000000000000000000000000060448201526064016107ce565b5f81604001515f8151811061128b5761128b6142a3565b6020026020010151905061129e83612d1c565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015611308573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061132c91906143f9565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611432575f826060015173ffffffffffffffffffffffffffffffffffffffff1683602001516040515f6040518083038185875af1925050503d805f81146113bc576040519150601f19603f3d011682016040523d82523d5f602084013e6113c1565b606091505b505090508061142c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c6564000000000000000000000000000000000060448201526064016107ce565b506114d8565b606082015160208301516040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831660048201526024810191909152829182169063a9059cbb906044016020604051808303815f875af11580156114b1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114d59190614414565b50505b60055460ff161561152257606082015173ffffffffffffffffffffffffffffffffffffffff165f90815260096020526040812080546001929061151c908490614481565b90915550505b60405183907f5152abf959f6564662358c2e52b702259b78bac5ee7842a0f01937e670efcc7d905f90a2505061155760015f55565b50565b611562612b90565b61072c613261565b611572612b90565b61157d600782612d05565b6115e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4f7264657220646f6573206e6f7420657869737400000000000000000000000060448201526064016107ce565b5f818152600660209081526040808320815160c0810183528154815260018201548185015260028201805484518187028101870186528181529295939486019383018282801561166757602002820191905f5260205f20905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161163c575b5050509183525050600382015473ffffffffffffffffffffffffffffffffffffffff8116602083015274010000000000000000000000000000000000000000900461ffff1660408083019190915260049092015460609091015281015180519192505f9182906116d9576116d96142a3565b602002602001015190506116ec83612d1c565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015611756573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061177a91906143f9565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611880575f826060015173ffffffffffffffffffffffffffffffffffffffff1683602001516040515f6040518083038185875af1925050503d805f811461180a576040519150601f19603f3d011682016040523d82523d5f602084013e61180f565b606091505b505090508061187a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c6564000000000000000000000000000000000060448201526064016107ce565b50611926565b606082015160208301516040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831660048201526024810191909152829182169063a9059cbb906044016020604051808303815f875af11580156118ff573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119239190614414565b50505b606082015173ffffffffffffffffffffffffffffffffffffffff165f90815260096020526040812080546001929061195f908490614481565b909155505060405183907f5152abf959f6564662358c2e52b702259b78bac5ee7842a0f01937e670efcc7d905f90a2505050565b61199b612b90565b805f03611a04576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5a65726f2066656500000000000000000000000000000000000000000000000060448201526064016107ce565b600355565b611a116132ba565b611a19612c94565b6127108261ffff161115611a89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f536c697070616765206f7574206f6620626f756e64000000000000000000000060448201526064016107ce565b845f03611af2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f5a65726f20616d6f756e7420696e00000000000000000000000000000000000060448201526064016107ce565b5f86118015611b0057505f81115b611b66576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f5a65726f2070726963650000000000000000000000000000000000000000000060448201526064016107ce565b6002831015611bd1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c69642070617468000000000000000000000000000000000000000060448201526064016107ce565b85858286865f82828281611be757611be76142a3565b9050602002016020810190611bfc9190614138565b90505f8383611c0c60018d614290565b818110611c1b57611c1b6142a3565b9050602002016020810190611c309190614138565b9050883373ffffffffffffffffffffffffffffffffffffffff841615801590611c6e575073ffffffffffffffffffffffffffffffffffffffff831615155b8015611ca657508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b611d0c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c696420746f6b656e7300000000000000000000000000000000000060448201526064016107ce565b335f9081526009602052604090205487111561213c57335f90815260096020526040812054611d3c908990612b85565b90505f611d488261286a565b905060025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015611db4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611dd891906143f9565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1603611ea357611e14818b614481565b341015611ea3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f496e73756666696369656e74206574682076616c756520666f7220737761702060448201527f616e64206275792063726564697473000000000000000000000000000000000060648201526084016107ce565b60025460035473ffffffffffffffffffffffffffffffffffffffff90911690637ff36ab5908390611ed49086612b7a565b600254604080517fad5c46480000000000000000000000000000000000000000000000000000000081529051611f8d9273ffffffffffffffffffffffffffffffffffffffff169163ad5c46489160048083019260209291908290030181865afa158015611f43573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f6791906143f9565b7f0000000000000000000000000000000000000000000000000000000000000000613327565b30611f9a4261012c6133d9565b6040518663ffffffff1660e01b8152600401611fb99493929190614494565b5f6040518083038185885af1158015611fd4573d5f803e3d5ffd5b50505050506040513d5f823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261201a91908101906141e2565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661208f85600354612b7a90919063ffffffff16565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909216600483015260248201526044016020604051808303815f875af11580156120fc573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121209190614414565b5050335f90815260096020526040902080549091019055612265565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121a6573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121ca91906143f9565b73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361226557873414612265576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f496e73756666696369656e74206574682076616c756520666f7220737761700060448201526064016107ce565b5f806122a38a8989808060200260200160405190810160405280939291908181526020018383602002808284375f9201919091525061051592505050565b915091508180156122b357508a81105b612319576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c69642074617267657420707269636500000000000000000000000060448201526064016107ce565b612321613c88565b81815260208082018d905260408083018d9052805191820184905281018d905260608082018d905288811b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116608084015288821b811660948401529086901b1660a882015260f086901b7fffff0000000000000000000000000000000000000000000000000000000000001660bc8201524360be8201525f9060de01604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209050612403600782612d05565b1561246a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4f72646572206964206d697374616b650000000000000000000000000000000060448201526064016107ce565b335f90815260096020526040812080548d9003905560045461249790612490908e612b7a565b42906133d9565b90506124b782846001602002015185600260200201518e8e8b8d886133e4565b6002546040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff91821660248201528a9182169063dd62ed3e90604401602060405180830381865afa15801561252c573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061255091906144d5565b5f03612611576002546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60248201529082169063095ea7b3906044016020604051808303815f875af11580156125eb573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061260f9190614414565b505b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561267b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061269f91906143f9565b73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16146127765760408085015190517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89811660048301523060248301526044820192909252908216906323b872dd906064016020604051808303815f875af1158015612750573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906127749190614414565b505b835160208086015160408088015181519485529284019190915282015273ffffffffffffffffffffffffffffffffffffffff8b811660608301528a8116608083015261ffff8a1660a083015260c0820184905288169084907f99657a932d9c70d2828b20283c6695ec3f56fab0cba81f52b3e59c7cb67b49ac9060e00160405180910390a350505050505050505050505050505061281360015f55565b505050505050565b612823612b90565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b5f8061288183600354612b7a90919063ffffffff16565b600254604080517fad5c464800000000000000000000000000000000000000000000000000000000815290519293505f9273ffffffffffffffffffffffffffffffffffffffff90921691631f00ca7491859161290291859163ad5c4648916004808201926020929091908290030181865afa158015611f43573d5f803e3d5ffd5b6040518363ffffffff1660e01b815260040161291f9291906141ca565b5f60405180830381865afa158015612939573d5f803e3d5ffd5b505050506040513d5f823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261297e91908101906141e2565b5f8151811061298f5761298f6142a3565b602002602001015190508092505050919050565b6129ab612b90565b600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6129e4612b90565b73ffffffffffffffffffffffffffffffffffffffff8116612a87576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016107ce565b611557816131e4565b612a98612b90565b5f8111612b01576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c69642074696d65000000000000000000000000000000000000000060448201526064016107ce565b600455565b5f611080825490565b5f805f612b216064610c8d6007612b06565b90505f612b2f826064612b7a565b9050612b3b6007612b06565b8110612b475781612b52565b612b528260016133d9565b915081612b5e8361352c565b9350935050509091565b5f612b7382846144ec565b9392505050565b5f612b738284614524565b5f612b738284614290565b60015473ffffffffffffffffffffffffffffffffffffffff61010090910416331461072c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107ce565b612c1f613554565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60025f5403612cff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107ce565b60025f55565b5f8181526001830160205260408120541515612b73565b612d276007826135c0565b505f8181526006602052604081208181556001810182905590612d4d6002830182613ca6565b506003810180547fffffffffffffffffffff000000000000000000000000000000000000000000001690555f60049091015550565b600254604080517fad5c464800000000000000000000000000000000000000000000000000000000815290515f9273ffffffffffffffffffffffffffffffffffffffff169163ad5c46489160048083019260209291908290030181865afa158015612def573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612e1391906143f9565b90505f845f81518110612e2857612e286142a3565b602002602001015190505f8560018751612e429190614290565b81518110612e5257612e526142a3565b602002602001015190508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612fdc5760025473ffffffffffffffffffffffffffffffffffffffff16637ff36ab588868989612ebd4261012c6133d9565b6040518663ffffffff1660e01b8152600401612edc9493929190614494565b5f6040518083038185885af193505050508015612f3857506040513d5f823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052612f3591908101906141e2565b60015b612f7657612f478783876135cb565b60405188907fe1bf2a28c083b93b502e4140fe14e357c3d973a7ec3d8517b6022a70bfd35626905f90a26131cf565b887ffec331350fce78ba658e082a71da20ac9f8d798a99b3c79681c8440cbfe77e078260018a51612fa79190614290565b81518110612fb757612fb76142a3565b6020026020010151604051612fce91815260200190565b60405180910390a2506131cf565b8273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036130b55760025473ffffffffffffffffffffffffffffffffffffffff166318cbafe58886898961303d4261012c6133d9565b6040518663ffffffff1660e01b815260040161305d95949392919061453b565b5f604051808303815f875af1925050508015612f3857506040513d5f823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052612f3591908101906141e2565b60025473ffffffffffffffffffffffffffffffffffffffff166338ed1739888689896130e34261012c6133d9565b6040518663ffffffff1660e01b815260040161310395949392919061453b565b5f604051808303815f875af192505050801561315e57506040513d5f823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261315b91908101906141e2565b60015b61316d57612f478783876135cb565b887ffec331350fce78ba658e082a71da20ac9f8d798a99b3c79681c8440cbfe77e078260018a5161319e9190614290565b815181106131ae576131ae6142a3565b60200260200101516040516131c591815260200190565b60405180910390a2505b5050505050505050565b5f612b73838361377e565b6001805473ffffffffffffffffffffffffffffffffffffffff8381166101008181027fffffffffffffffffffffff0000000000000000000000000000000000000000ff85161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6132696132ba565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833612c6a565b60015460ff161561072c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016107ce565b60408051600280825260608083018452925f92919060208301908036833701905050905083815f8151811061335e5761335e6142a3565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082816001815181106133ac576133ac6142a3565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152905092915050565b5f612b738284614481565b5f6040518060c001604052808981526020018881526020018787808060200260200160405190810160405280939291908181526020018383602002808284375f9201919091525050509082525073ffffffffffffffffffffffffffffffffffffffff8616602082015261ffff85166040820152606001839052905061346a60078a6137a4565b505f89815260066020908152604091829020835181558184015160018201559183015180518493926134a3926002850192910190613cc1565b506060820151600382018054608085015161ffff1674010000000000000000000000000000000000000000027fffffffffffffffffffff0000000000000000000000000000000000000000000090911673ffffffffffffffffffffffffffffffffffffffff9093169290921791909117905560a090910151600490910155505050505050505050565b5f805b821561108057613540600a846144ec565b92508061354c8161444a565b91505061352f565b60015460ff1661072c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016107ce565b5f612b7383836137af565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015613635573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061365991906143f9565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603613757575f8173ffffffffffffffffffffffffffffffffffffffff16846040515f6040518083038185875af1925050503d805f81146136e1576040519150601f19603f3d011682016040523d82523d5f602084013e6136e6565b606091505b5050905080613751576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c6564000000000000000000000000000000000060448201526064016107ce565b50505050565b8161375173ffffffffffffffffffffffffffffffffffffffff82168386613899565b505050565b5f825f018281548110613793576137936142a3565b905f5260205f200154905092915050565b5f612b738383613926565b5f8181526001830160205260408120548015613889575f6137d1600183614290565b85549091505f906137e490600190614290565b9050818114613843575f865f018281548110613802576138026142a3565b905f5260205f200154905080875f018481548110613822576138226142a3565b5f918252602080832090910192909255918252600188019052604090208390555b855486908061385457613854614583565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f905560019350505050611080565b5f915050611080565b5092915050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052613779908490613972565b5f81815260018301602052604081205461396b57508154600181810184555f848152602080822090930184905584548482528286019093526040902091909155611080565b505f611080565b5f6139d3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16613a7f9092919063ffffffff16565b905080515f14806139f35750808060200190518101906139f39190614414565b613779576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016107ce565b6060613a8d84845f85613a95565b949350505050565b606082471015613b27576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016107ce565b5f808673ffffffffffffffffffffffffffffffffffffffff168587604051613b4f91906145b0565b5f6040518083038185875af1925050503d805f8114613b89576040519150601f19603f3d011682016040523d82523d5f602084013e613b8e565b606091505b5091509150613b9f87838387613baa565b979650505050505050565b60608315613c3f5782515f03613c385773ffffffffffffffffffffffffffffffffffffffff85163b613c38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107ce565b5081613a8d565b613a8d8383815115613c545781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ce91906145cb565b60405180606001604052806003906020820280368337509192915050565b5080545f8255905f5260205f20908101906115579190613d49565b828054828255905f5260205f20908101928215613d39579160200282015b82811115613d3957825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190613cdf565b50613d45929150613d49565b5090565b5b80821115613d45575f8155600101613d4a565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613dd157613dd1613d5d565b604052919050565b5f67ffffffffffffffff821115613df257613df2613d5d565b5060051b60200190565b73ffffffffffffffffffffffffffffffffffffffff81168114611557575f80fd5b5f8060408385031215613e2e575f80fd5b8235915060208084013567ffffffffffffffff811115613e4c575f80fd5b8401601f81018613613e5c575f80fd5b8035613e6f613e6a82613dd9565b613d8a565b81815260059190911b82018301908381019088831115613e8d575f80fd5b928401925b82841015613eb4578335613ea581613dfc565b82529284019290840190613e92565b80955050505050509250929050565b5f8060208385031215613ed4575f80fd5b823567ffffffffffffffff80821115613eeb575f80fd5b818501915085601f830112613efe575f80fd5b813581811115613f0c575f80fd5b866020828501011115613f1d575f80fd5b60209290920196919550909350505050565b5f60208284031215613f3f575f80fd5b5035919050565b5f602080835260e08301845182850152818501516040850152604085015160c060608601528181518084526101008701915084830193505f92505b80831015613fb757835173ffffffffffffffffffffffffffffffffffffffff168252928401926001929092019190840190613f81565b50606087015173ffffffffffffffffffffffffffffffffffffffff811660808801529350608087015161ffff811660a0880152935060a087015160c08701528094505050505092915050565b5f5b8381101561401d578181015183820152602001614005565b50505f910152565b5f815180845261403c816020860160208601614003565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b8215158152604060208201525f613a8d6040830184614025565b803561ffff81168114614099575f80fd5b919050565b5f805f805f8060a087890312156140b3575f80fd5b8635955060208701359450604087013567ffffffffffffffff808211156140d8575f80fd5b818901915089601f8301126140eb575f80fd5b8135818111156140f9575f80fd5b8a60208260051b850101111561410d575f80fd5b60208301965080955050505061412560608801614088565b9150608087013590509295509295509295565b5f60208284031215614148575f80fd5b8135612b7381613dfc565b8015158114611557575f80fd5b5f60208284031215614170575f80fd5b8135612b7381614153565b5f8151808452602080850194508084015f5b838110156141bf57815173ffffffffffffffffffffffffffffffffffffffff168752958201959082019060010161418d565b509495945050505050565b828152604060208201525f613a8d604083018461417b565b5f60208083850312156141f3575f80fd5b825167ffffffffffffffff811115614209575f80fd5b8301601f81018513614219575f80fd5b8051614227613e6a82613dd9565b81815260059190911b82018301908381019087831115614245575f80fd5b928401925b82841015613b9f5783518252928401929084019061424a565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b8181038181111561108057611080614263565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b600181815b8085111561432957817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561430f5761430f614263565b8085161561431c57918102915b93841c93908002906142d5565b509250929050565b5f8261433f57506001611080565b8161434b57505f611080565b8160018114614361576002811461436b57614387565b6001915050611080565b60ff84111561437c5761437c614263565b50506001821b611080565b5060208310610133831016604e8410600b84101617156143aa575081810a611080565b6143b483836142d0565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156143e6576143e6614263565b029392505050565b5f612b738383614331565b5f60208284031215614409575f80fd5b8151612b7381613dfc565b5f60208284031215614424575f80fd5b8151612b7381614153565b61ffff82811682821603908082111561389257613892614263565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361447a5761447a614263565b5060010190565b8082018082111561108057611080614263565b848152608060208201525f6144ac608083018661417b565b73ffffffffffffffffffffffffffffffffffffffff949094166040830152506060015292915050565b5f602082840312156144e5575f80fd5b5051919050565b5f8261451f577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b500490565b808202811582820484141761108057611080614263565b85815284602082015260a060408201525f61455960a083018661417b565b73ffffffffffffffffffffffffffffffffffffffff94909416606083015250608001529392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b5f82516145c1818460208701614003565b9190910192915050565b602081525f612b73602083018461402556fea2646970667358221220da87ab51c9c74661496a6493d6efef3065f22c06f863d79a8bc637abcf45a58f64736f6c63430008140033",
}

// NineInchSpotLimitPLSABI is the input ABI used to generate the binding from.
// Deprecated: Use NineInchSpotLimitPLSMetaData.ABI instead.
var NineInchSpotLimitPLSABI = NineInchSpotLimitPLSMetaData.ABI

// NineInchSpotLimitPLSBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NineInchSpotLimitPLSMetaData.Bin instead.
var NineInchSpotLimitPLSBin = NineInchSpotLimitPLSMetaData.Bin

// DeployNineInchSpotLimitPLS deploys a new Ethereum contract, binding an instance of NineInchSpotLimitPLS to it.
func DeployNineInchSpotLimitPLS(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *NineInchSpotLimitPLS, error) {
	parsed, err := NineInchSpotLimitPLSMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(NineInchSpotLimitPLSBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NineInchSpotLimitPLS{NineInchSpotLimitPLSCaller: NineInchSpotLimitPLSCaller{contract: contract}, NineInchSpotLimitPLSTransactor: NineInchSpotLimitPLSTransactor{contract: contract}, NineInchSpotLimitPLSFilterer: NineInchSpotLimitPLSFilterer{contract: contract}}, nil
}

// NineInchSpotLimitPLS is an auto generated Go binding around an Ethereum contract.
type NineInchSpotLimitPLS struct {
	NineInchSpotLimitPLSCaller     // Read-only binding to the contract
	NineInchSpotLimitPLSTransactor // Write-only binding to the contract
	NineInchSpotLimitPLSFilterer   // Log filterer for contract events
}

// NineInchSpotLimitPLSCaller is an auto generated read-only Go binding around an Ethereum contract.
type NineInchSpotLimitPLSCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NineInchSpotLimitPLSTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NineInchSpotLimitPLSTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NineInchSpotLimitPLSFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NineInchSpotLimitPLSFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NineInchSpotLimitPLSSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NineInchSpotLimitPLSSession struct {
	Contract     *NineInchSpotLimitPLS // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// NineInchSpotLimitPLSCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NineInchSpotLimitPLSCallerSession struct {
	Contract *NineInchSpotLimitPLSCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// NineInchSpotLimitPLSTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NineInchSpotLimitPLSTransactorSession struct {
	Contract     *NineInchSpotLimitPLSTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// NineInchSpotLimitPLSRaw is an auto generated low-level Go binding around an Ethereum contract.
type NineInchSpotLimitPLSRaw struct {
	Contract *NineInchSpotLimitPLS // Generic contract binding to access the raw methods on
}

// NineInchSpotLimitPLSCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NineInchSpotLimitPLSCallerRaw struct {
	Contract *NineInchSpotLimitPLSCaller // Generic read-only contract binding to access the raw methods on
}

// NineInchSpotLimitPLSTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NineInchSpotLimitPLSTransactorRaw struct {
	Contract *NineInchSpotLimitPLSTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNineInchSpotLimitPLS creates a new instance of NineInchSpotLimitPLS, bound to a specific deployed contract.
func NewNineInchSpotLimitPLS(address common.Address, backend bind.ContractBackend) (*NineInchSpotLimitPLS, error) {
	contract, err := bindNineInchSpotLimitPLS(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NineInchSpotLimitPLS{NineInchSpotLimitPLSCaller: NineInchSpotLimitPLSCaller{contract: contract}, NineInchSpotLimitPLSTransactor: NineInchSpotLimitPLSTransactor{contract: contract}, NineInchSpotLimitPLSFilterer: NineInchSpotLimitPLSFilterer{contract: contract}}, nil
}

// NewNineInchSpotLimitPLSCaller creates a new read-only instance of NineInchSpotLimitPLS, bound to a specific deployed contract.
func NewNineInchSpotLimitPLSCaller(address common.Address, caller bind.ContractCaller) (*NineInchSpotLimitPLSCaller, error) {
	contract, err := bindNineInchSpotLimitPLS(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NineInchSpotLimitPLSCaller{contract: contract}, nil
}

// NewNineInchSpotLimitPLSTransactor creates a new write-only instance of NineInchSpotLimitPLS, bound to a specific deployed contract.
func NewNineInchSpotLimitPLSTransactor(address common.Address, transactor bind.ContractTransactor) (*NineInchSpotLimitPLSTransactor, error) {
	contract, err := bindNineInchSpotLimitPLS(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NineInchSpotLimitPLSTransactor{contract: contract}, nil
}

// NewNineInchSpotLimitPLSFilterer creates a new log filterer instance of NineInchSpotLimitPLS, bound to a specific deployed contract.
func NewNineInchSpotLimitPLSFilterer(address common.Address, filterer bind.ContractFilterer) (*NineInchSpotLimitPLSFilterer, error) {
	contract, err := bindNineInchSpotLimitPLS(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NineInchSpotLimitPLSFilterer{contract: contract}, nil
}

// bindNineInchSpotLimitPLS binds a generic wrapper to an already deployed contract.
func bindNineInchSpotLimitPLS(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := NineInchSpotLimitPLSMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NineInchSpotLimitPLS.Contract.NineInchSpotLimitPLSCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.Contract.NineInchSpotLimitPLSTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.Contract.NineInchSpotLimitPLSTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NineInchSpotLimitPLS.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.Contract.contract.Transact(opts, method, params...)
}

// AdminAddress is a free data retrieval call binding the contract method 0xfc6f9468.
//
// Solidity: function adminAddress() view returns(address)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCaller) AdminAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NineInchSpotLimitPLS.contract.Call(opts, &out, "adminAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AdminAddress is a free data retrieval call binding the contract method 0xfc6f9468.
//
// Solidity: function adminAddress() view returns(address)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSSession) AdminAddress() (common.Address, error) {
	return _NineInchSpotLimitPLS.Contract.AdminAddress(&_NineInchSpotLimitPLS.CallOpts)
}

// AdminAddress is a free data retrieval call binding the contract method 0xfc6f9468.
//
// Solidity: function adminAddress() view returns(address)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCallerSession) AdminAddress() (common.Address, error) {
	return _NineInchSpotLimitPLS.Contract.AdminAddress(&_NineInchSpotLimitPLS.CallOpts)
}

// CheckUpkeep is a free data retrieval call binding the contract method 0x6e04ff0d.
//
// Solidity: function checkUpkeep(bytes checkData) view returns(bool, bytes)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCaller) CheckUpkeep(opts *bind.CallOpts, checkData []byte) (bool, []byte, error) {
	var out []interface{}
	err := _NineInchSpotLimitPLS.contract.Call(opts, &out, "checkUpkeep", checkData)

	if err != nil {
		return *new(bool), *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new([]byte)).(*[]byte)

	return out0, out1, err

}

// CheckUpkeep is a free data retrieval call binding the contract method 0x6e04ff0d.
//
// Solidity: function checkUpkeep(bytes checkData) view returns(bool, bytes)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSSession) CheckUpkeep(checkData []byte) (bool, []byte, error) {
	return _NineInchSpotLimitPLS.Contract.CheckUpkeep(&_NineInchSpotLimitPLS.CallOpts, checkData)
}

// CheckUpkeep is a free data retrieval call binding the contract method 0x6e04ff0d.
//
// Solidity: function checkUpkeep(bytes checkData) view returns(bool, bytes)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCallerSession) CheckUpkeep(checkData []byte) (bool, []byte, error) {
	return _NineInchSpotLimitPLS.Contract.CheckUpkeep(&_NineInchSpotLimitPLS.CallOpts, checkData)
}

// CreditPrice is a free data retrieval call binding the contract method 0xca6358cd.
//
// Solidity: function creditPrice() view returns(uint256)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCaller) CreditPrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NineInchSpotLimitPLS.contract.Call(opts, &out, "creditPrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CreditPrice is a free data retrieval call binding the contract method 0xca6358cd.
//
// Solidity: function creditPrice() view returns(uint256)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSSession) CreditPrice() (*big.Int, error) {
	return _NineInchSpotLimitPLS.Contract.CreditPrice(&_NineInchSpotLimitPLS.CallOpts)
}

// CreditPrice is a free data retrieval call binding the contract method 0xca6358cd.
//
// Solidity: function creditPrice() view returns(uint256)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCallerSession) CreditPrice() (*big.Int, error) {
	return _NineInchSpotLimitPLS.Contract.CreditPrice(&_NineInchSpotLimitPLS.CallOpts)
}

// CreditPriceInEth is a free data retrieval call binding the contract method 0xd7a9a378.
//
// Solidity: function creditPriceInEth(uint256 numCredits) view returns(uint256)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCaller) CreditPriceInEth(opts *bind.CallOpts, numCredits *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _NineInchSpotLimitPLS.contract.Call(opts, &out, "creditPriceInEth", numCredits)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CreditPriceInEth is a free data retrieval call binding the contract method 0xd7a9a378.
//
// Solidity: function creditPriceInEth(uint256 numCredits) view returns(uint256)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSSession) CreditPriceInEth(numCredits *big.Int) (*big.Int, error) {
	return _NineInchSpotLimitPLS.Contract.CreditPriceInEth(&_NineInchSpotLimitPLS.CallOpts, numCredits)
}

// CreditPriceInEth is a free data retrieval call binding the contract method 0xd7a9a378.
//
// Solidity: function creditPriceInEth(uint256 numCredits) view returns(uint256)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCallerSession) CreditPriceInEth(numCredits *big.Int) (*big.Int, error) {
	return _NineInchSpotLimitPLS.Contract.CreditPriceInEth(&_NineInchSpotLimitPLS.CallOpts, numCredits)
}

// CreditTime is a free data retrieval call binding the contract method 0xadfd4354.
//
// Solidity: function creditTime() view returns(uint256)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCaller) CreditTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NineInchSpotLimitPLS.contract.Call(opts, &out, "creditTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CreditTime is a free data retrieval call binding the contract method 0xadfd4354.
//
// Solidity: function creditTime() view returns(uint256)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSSession) CreditTime() (*big.Int, error) {
	return _NineInchSpotLimitPLS.Contract.CreditTime(&_NineInchSpotLimitPLS.CallOpts)
}

// CreditTime is a free data retrieval call binding the contract method 0xadfd4354.
//
// Solidity: function creditTime() view returns(uint256)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCallerSession) CreditTime() (*big.Int, error) {
	return _NineInchSpotLimitPLS.Contract.CreditTime(&_NineInchSpotLimitPLS.CallOpts)
}

// Credits is a free data retrieval call binding the contract method 0xfe5ff468.
//
// Solidity: function credits(address ) view returns(uint256)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCaller) Credits(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _NineInchSpotLimitPLS.contract.Call(opts, &out, "credits", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Credits is a free data retrieval call binding the contract method 0xfe5ff468.
//
// Solidity: function credits(address ) view returns(uint256)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSSession) Credits(arg0 common.Address) (*big.Int, error) {
	return _NineInchSpotLimitPLS.Contract.Credits(&_NineInchSpotLimitPLS.CallOpts, arg0)
}

// Credits is a free data retrieval call binding the contract method 0xfe5ff468.
//
// Solidity: function credits(address ) view returns(uint256)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCallerSession) Credits(arg0 common.Address) (*big.Int, error) {
	return _NineInchSpotLimitPLS.Contract.Credits(&_NineInchSpotLimitPLS.CallOpts, arg0)
}

// GetBatch is a free data retrieval call binding the contract method 0x3b1fee6c.
//
// Solidity: function getBatch() view returns(uint256 start, uint256 end)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCaller) GetBatch(opts *bind.CallOpts) (struct {
	Start *big.Int
	End   *big.Int
}, error) {
	var out []interface{}
	err := _NineInchSpotLimitPLS.contract.Call(opts, &out, "getBatch")

	outstruct := new(struct {
		Start *big.Int
		End   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Start = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.End = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetBatch is a free data retrieval call binding the contract method 0x3b1fee6c.
//
// Solidity: function getBatch() view returns(uint256 start, uint256 end)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSSession) GetBatch() (struct {
	Start *big.Int
	End   *big.Int
}, error) {
	return _NineInchSpotLimitPLS.Contract.GetBatch(&_NineInchSpotLimitPLS.CallOpts)
}

// GetBatch is a free data retrieval call binding the contract method 0x3b1fee6c.
//
// Solidity: function getBatch() view returns(uint256 start, uint256 end)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCallerSession) GetBatch() (struct {
	Start *big.Int
	End   *big.Int
}, error) {
	return _NineInchSpotLimitPLS.Contract.GetBatch(&_NineInchSpotLimitPLS.CallOpts)
}

// GetOrder is a free data retrieval call binding the contract method 0x5778472a.
//
// Solidity: function getOrder(bytes32 orderId) view returns((uint256,uint256,address[],address,uint16,uint256))
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCaller) GetOrder(opts *bind.CallOpts, orderId [32]byte) (NineInchSpotLimitPLSOrder, error) {
	var out []interface{}
	err := _NineInchSpotLimitPLS.contract.Call(opts, &out, "getOrder", orderId)

	if err != nil {
		return *new(NineInchSpotLimitPLSOrder), err
	}

	out0 := *abi.ConvertType(out[0], new(NineInchSpotLimitPLSOrder)).(*NineInchSpotLimitPLSOrder)

	return out0, err

}

// GetOrder is a free data retrieval call binding the contract method 0x5778472a.
//
// Solidity: function getOrder(bytes32 orderId) view returns((uint256,uint256,address[],address,uint16,uint256))
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSSession) GetOrder(orderId [32]byte) (NineInchSpotLimitPLSOrder, error) {
	return _NineInchSpotLimitPLS.Contract.GetOrder(&_NineInchSpotLimitPLS.CallOpts, orderId)
}

// GetOrder is a free data retrieval call binding the contract method 0x5778472a.
//
// Solidity: function getOrder(bytes32 orderId) view returns((uint256,uint256,address[],address,uint16,uint256))
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCallerSession) GetOrder(orderId [32]byte) (NineInchSpotLimitPLSOrder, error) {
	return _NineInchSpotLimitPLS.Contract.GetOrder(&_NineInchSpotLimitPLS.CallOpts, orderId)
}

// GetOrderAt is a free data retrieval call binding the contract method 0x73a423d0.
//
// Solidity: function getOrderAt(uint256 index) view returns(bytes32)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCaller) GetOrderAt(opts *bind.CallOpts, index *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _NineInchSpotLimitPLS.contract.Call(opts, &out, "getOrderAt", index)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetOrderAt is a free data retrieval call binding the contract method 0x73a423d0.
//
// Solidity: function getOrderAt(uint256 index) view returns(bytes32)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSSession) GetOrderAt(index *big.Int) ([32]byte, error) {
	return _NineInchSpotLimitPLS.Contract.GetOrderAt(&_NineInchSpotLimitPLS.CallOpts, index)
}

// GetOrderAt is a free data retrieval call binding the contract method 0x73a423d0.
//
// Solidity: function getOrderAt(uint256 index) view returns(bytes32)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCallerSession) GetOrderAt(index *big.Int) ([32]byte, error) {
	return _NineInchSpotLimitPLS.Contract.GetOrderAt(&_NineInchSpotLimitPLS.CallOpts, index)
}

// GetPrice is a free data retrieval call binding the contract method 0x0c0fa81a.
//
// Solidity: function getPrice(uint256 amountIn, address[] path) view returns(bool, uint256)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCaller) GetPrice(opts *bind.CallOpts, amountIn *big.Int, path []common.Address) (bool, *big.Int, error) {
	var out []interface{}
	err := _NineInchSpotLimitPLS.contract.Call(opts, &out, "getPrice", amountIn, path)

	if err != nil {
		return *new(bool), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetPrice is a free data retrieval call binding the contract method 0x0c0fa81a.
//
// Solidity: function getPrice(uint256 amountIn, address[] path) view returns(bool, uint256)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSSession) GetPrice(amountIn *big.Int, path []common.Address) (bool, *big.Int, error) {
	return _NineInchSpotLimitPLS.Contract.GetPrice(&_NineInchSpotLimitPLS.CallOpts, amountIn, path)
}

// GetPrice is a free data retrieval call binding the contract method 0x0c0fa81a.
//
// Solidity: function getPrice(uint256 amountIn, address[] path) view returns(bool, uint256)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCallerSession) GetPrice(amountIn *big.Int, path []common.Address) (bool, *big.Int, error) {
	return _NineInchSpotLimitPLS.Contract.GetPrice(&_NineInchSpotLimitPLS.CallOpts, amountIn, path)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NineInchSpotLimitPLS.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSSession) Owner() (common.Address, error) {
	return _NineInchSpotLimitPLS.Contract.Owner(&_NineInchSpotLimitPLS.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCallerSession) Owner() (common.Address, error) {
	return _NineInchSpotLimitPLS.Contract.Owner(&_NineInchSpotLimitPLS.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _NineInchSpotLimitPLS.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSSession) Paused() (bool, error) {
	return _NineInchSpotLimitPLS.Contract.Paused(&_NineInchSpotLimitPLS.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCallerSession) Paused() (bool, error) {
	return _NineInchSpotLimitPLS.Contract.Paused(&_NineInchSpotLimitPLS.CallOpts)
}

// ReturnCredit is a free data retrieval call binding the contract method 0xcb59e5c0.
//
// Solidity: function returnCredit() view returns(bool)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCaller) ReturnCredit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _NineInchSpotLimitPLS.contract.Call(opts, &out, "returnCredit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ReturnCredit is a free data retrieval call binding the contract method 0xcb59e5c0.
//
// Solidity: function returnCredit() view returns(bool)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSSession) ReturnCredit() (bool, error) {
	return _NineInchSpotLimitPLS.Contract.ReturnCredit(&_NineInchSpotLimitPLS.CallOpts)
}

// ReturnCredit is a free data retrieval call binding the contract method 0xcb59e5c0.
//
// Solidity: function returnCredit() view returns(bool)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCallerSession) ReturnCredit() (bool, error) {
	return _NineInchSpotLimitPLS.Contract.ReturnCredit(&_NineInchSpotLimitPLS.CallOpts)
}

// TotalOrders is a free data retrieval call binding the contract method 0x1d834409.
//
// Solidity: function totalOrders() view returns(uint256)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCaller) TotalOrders(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NineInchSpotLimitPLS.contract.Call(opts, &out, "totalOrders")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalOrders is a free data retrieval call binding the contract method 0x1d834409.
//
// Solidity: function totalOrders() view returns(uint256)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSSession) TotalOrders() (*big.Int, error) {
	return _NineInchSpotLimitPLS.Contract.TotalOrders(&_NineInchSpotLimitPLS.CallOpts)
}

// TotalOrders is a free data retrieval call binding the contract method 0x1d834409.
//
// Solidity: function totalOrders() view returns(uint256)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSCallerSession) TotalOrders() (*big.Int, error) {
	return _NineInchSpotLimitPLS.Contract.TotalOrders(&_NineInchSpotLimitPLS.CallOpts)
}

// CancelOrder is a paid mutator transaction binding the contract method 0x7489ec23.
//
// Solidity: function cancelOrder(bytes32 orderId) returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSTransactor) CancelOrder(opts *bind.TransactOpts, orderId [32]byte) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.contract.Transact(opts, "cancelOrder", orderId)
}

// CancelOrder is a paid mutator transaction binding the contract method 0x7489ec23.
//
// Solidity: function cancelOrder(bytes32 orderId) returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSSession) CancelOrder(orderId [32]byte) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.Contract.CancelOrder(&_NineInchSpotLimitPLS.TransactOpts, orderId)
}

// CancelOrder is a paid mutator transaction binding the contract method 0x7489ec23.
//
// Solidity: function cancelOrder(bytes32 orderId) returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSTransactorSession) CancelOrder(orderId [32]byte) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.Contract.CancelOrder(&_NineInchSpotLimitPLS.TransactOpts, orderId)
}

// CreateOrder is a paid mutator transaction binding the contract method 0xae182dcd.
//
// Solidity: function createOrder(uint256 targetPrice_, uint256 amountIn_, address[] path_, uint16 slippage_, uint256 credits_) payable returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSTransactor) CreateOrder(opts *bind.TransactOpts, targetPrice_ *big.Int, amountIn_ *big.Int, path_ []common.Address, slippage_ uint16, credits_ *big.Int) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.contract.Transact(opts, "createOrder", targetPrice_, amountIn_, path_, slippage_, credits_)
}

// CreateOrder is a paid mutator transaction binding the contract method 0xae182dcd.
//
// Solidity: function createOrder(uint256 targetPrice_, uint256 amountIn_, address[] path_, uint16 slippage_, uint256 credits_) payable returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSSession) CreateOrder(targetPrice_ *big.Int, amountIn_ *big.Int, path_ []common.Address, slippage_ uint16, credits_ *big.Int) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.Contract.CreateOrder(&_NineInchSpotLimitPLS.TransactOpts, targetPrice_, amountIn_, path_, slippage_, credits_)
}

// CreateOrder is a paid mutator transaction binding the contract method 0xae182dcd.
//
// Solidity: function createOrder(uint256 targetPrice_, uint256 amountIn_, address[] path_, uint16 slippage_, uint256 credits_) payable returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSTransactorSession) CreateOrder(targetPrice_ *big.Int, amountIn_ *big.Int, path_ []common.Address, slippage_ uint16, credits_ *big.Int) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.Contract.CreateOrder(&_NineInchSpotLimitPLS.TransactOpts, targetPrice_, amountIn_, path_, slippage_, credits_)
}

// ForceCancelOrder is a paid mutator transaction binding the contract method 0x95048d46.
//
// Solidity: function forceCancelOrder(bytes32 orderId_) returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSTransactor) ForceCancelOrder(opts *bind.TransactOpts, orderId_ [32]byte) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.contract.Transact(opts, "forceCancelOrder", orderId_)
}

// ForceCancelOrder is a paid mutator transaction binding the contract method 0x95048d46.
//
// Solidity: function forceCancelOrder(bytes32 orderId_) returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSSession) ForceCancelOrder(orderId_ [32]byte) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.Contract.ForceCancelOrder(&_NineInchSpotLimitPLS.TransactOpts, orderId_)
}

// ForceCancelOrder is a paid mutator transaction binding the contract method 0x95048d46.
//
// Solidity: function forceCancelOrder(bytes32 orderId_) returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSTransactorSession) ForceCancelOrder(orderId_ [32]byte) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.Contract.ForceCancelOrder(&_NineInchSpotLimitPLS.TransactOpts, orderId_)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSSession) Pause() (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.Contract.Pause(&_NineInchSpotLimitPLS.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSTransactorSession) Pause() (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.Contract.Pause(&_NineInchSpotLimitPLS.TransactOpts)
}

// PerformUpkeep is a paid mutator transaction binding the contract method 0x4585e33b.
//
// Solidity: function performUpkeep(bytes performData) returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSTransactor) PerformUpkeep(opts *bind.TransactOpts, performData []byte) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.contract.Transact(opts, "performUpkeep", performData)
}

// PerformUpkeep is a paid mutator transaction binding the contract method 0x4585e33b.
//
// Solidity: function performUpkeep(bytes performData) returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSSession) PerformUpkeep(performData []byte) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.Contract.PerformUpkeep(&_NineInchSpotLimitPLS.TransactOpts, performData)
}

// PerformUpkeep is a paid mutator transaction binding the contract method 0x4585e33b.
//
// Solidity: function performUpkeep(bytes performData) returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSTransactorSession) PerformUpkeep(performData []byte) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.Contract.PerformUpkeep(&_NineInchSpotLimitPLS.TransactOpts, performData)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSSession) RenounceOwnership() (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.Contract.RenounceOwnership(&_NineInchSpotLimitPLS.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.Contract.RenounceOwnership(&_NineInchSpotLimitPLS.TransactOpts)
}

// SetCreditPrice is a paid mutator transaction binding the contract method 0xad17a0b3.
//
// Solidity: function setCreditPrice(uint256 _creditPrice) returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSTransactor) SetCreditPrice(opts *bind.TransactOpts, _creditPrice *big.Int) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.contract.Transact(opts, "setCreditPrice", _creditPrice)
}

// SetCreditPrice is a paid mutator transaction binding the contract method 0xad17a0b3.
//
// Solidity: function setCreditPrice(uint256 _creditPrice) returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSSession) SetCreditPrice(_creditPrice *big.Int) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.Contract.SetCreditPrice(&_NineInchSpotLimitPLS.TransactOpts, _creditPrice)
}

// SetCreditPrice is a paid mutator transaction binding the contract method 0xad17a0b3.
//
// Solidity: function setCreditPrice(uint256 _creditPrice) returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSTransactorSession) SetCreditPrice(_creditPrice *big.Int) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.Contract.SetCreditPrice(&_NineInchSpotLimitPLS.TransactOpts, _creditPrice)
}

// SetReturnCredit is a paid mutator transaction binding the contract method 0xec57dd59.
//
// Solidity: function setReturnCredit(bool return_) returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSTransactor) SetReturnCredit(opts *bind.TransactOpts, return_ bool) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.contract.Transact(opts, "setReturnCredit", return_)
}

// SetReturnCredit is a paid mutator transaction binding the contract method 0xec57dd59.
//
// Solidity: function setReturnCredit(bool return_) returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSSession) SetReturnCredit(return_ bool) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.Contract.SetReturnCredit(&_NineInchSpotLimitPLS.TransactOpts, return_)
}

// SetReturnCredit is a paid mutator transaction binding the contract method 0xec57dd59.
//
// Solidity: function setReturnCredit(bool return_) returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSTransactorSession) SetReturnCredit(return_ bool) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.Contract.SetReturnCredit(&_NineInchSpotLimitPLS.TransactOpts, return_)
}

// SetTimeCredit is a paid mutator transaction binding the contract method 0xfab6d6d0.
//
// Solidity: function setTimeCredit(uint256 newTimeCredit_) returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSTransactor) SetTimeCredit(opts *bind.TransactOpts, newTimeCredit_ *big.Int) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.contract.Transact(opts, "setTimeCredit", newTimeCredit_)
}

// SetTimeCredit is a paid mutator transaction binding the contract method 0xfab6d6d0.
//
// Solidity: function setTimeCredit(uint256 newTimeCredit_) returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSSession) SetTimeCredit(newTimeCredit_ *big.Int) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.Contract.SetTimeCredit(&_NineInchSpotLimitPLS.TransactOpts, newTimeCredit_)
}

// SetTimeCredit is a paid mutator transaction binding the contract method 0xfab6d6d0.
//
// Solidity: function setTimeCredit(uint256 newTimeCredit_) returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSTransactorSession) SetTimeCredit(newTimeCredit_ *big.Int) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.Contract.SetTimeCredit(&_NineInchSpotLimitPLS.TransactOpts, newTimeCredit_)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.Contract.TransferOwnership(&_NineInchSpotLimitPLS.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.Contract.TransferOwnership(&_NineInchSpotLimitPLS.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSSession) Unpause() (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.Contract.Unpause(&_NineInchSpotLimitPLS.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSTransactorSession) Unpause() (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.Contract.Unpause(&_NineInchSpotLimitPLS.TransactOpts)
}

// UpdateRouter is a paid mutator transaction binding the contract method 0xc851cc32.
//
// Solidity: function updateRouter(address _router) returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSTransactor) UpdateRouter(opts *bind.TransactOpts, _router common.Address) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.contract.Transact(opts, "updateRouter", _router)
}

// UpdateRouter is a paid mutator transaction binding the contract method 0xc851cc32.
//
// Solidity: function updateRouter(address _router) returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSSession) UpdateRouter(_router common.Address) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.Contract.UpdateRouter(&_NineInchSpotLimitPLS.TransactOpts, _router)
}

// UpdateRouter is a paid mutator transaction binding the contract method 0xc851cc32.
//
// Solidity: function updateRouter(address _router) returns()
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSTransactorSession) UpdateRouter(_router common.Address) (*types.Transaction, error) {
	return _NineInchSpotLimitPLS.Contract.UpdateRouter(&_NineInchSpotLimitPLS.TransactOpts, _router)
}

// NineInchSpotLimitPLSBoughtCreditIterator is returned from FilterBoughtCredit and is used to iterate over the raw logs and unpacked data for BoughtCredit events raised by the NineInchSpotLimitPLS contract.
type NineInchSpotLimitPLSBoughtCreditIterator struct {
	Event *NineInchSpotLimitPLSBoughtCredit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NineInchSpotLimitPLSBoughtCreditIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NineInchSpotLimitPLSBoughtCredit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NineInchSpotLimitPLSBoughtCredit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NineInchSpotLimitPLSBoughtCreditIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NineInchSpotLimitPLSBoughtCreditIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NineInchSpotLimitPLSBoughtCredit represents a BoughtCredit event raised by the NineInchSpotLimitPLS contract.
type NineInchSpotLimitPLSBoughtCredit struct {
	Wallet common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBoughtCredit is a free log retrieval operation binding the contract event 0x4bc825bd98a36bebb10cd3632627be2dc7455c948a746f80ee19d02c62f9256c.
//
// Solidity: event BoughtCredit(address indexed wallet, uint256 amount)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) FilterBoughtCredit(opts *bind.FilterOpts, wallet []common.Address) (*NineInchSpotLimitPLSBoughtCreditIterator, error) {

	var walletRule []interface{}
	for _, walletItem := range wallet {
		walletRule = append(walletRule, walletItem)
	}

	logs, sub, err := _NineInchSpotLimitPLS.contract.FilterLogs(opts, "BoughtCredit", walletRule)
	if err != nil {
		return nil, err
	}
	return &NineInchSpotLimitPLSBoughtCreditIterator{contract: _NineInchSpotLimitPLS.contract, event: "BoughtCredit", logs: logs, sub: sub}, nil
}

// WatchBoughtCredit is a free log subscription operation binding the contract event 0x4bc825bd98a36bebb10cd3632627be2dc7455c948a746f80ee19d02c62f9256c.
//
// Solidity: event BoughtCredit(address indexed wallet, uint256 amount)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) WatchBoughtCredit(opts *bind.WatchOpts, sink chan<- *NineInchSpotLimitPLSBoughtCredit, wallet []common.Address) (event.Subscription, error) {

	var walletRule []interface{}
	for _, walletItem := range wallet {
		walletRule = append(walletRule, walletItem)
	}

	logs, sub, err := _NineInchSpotLimitPLS.contract.WatchLogs(opts, "BoughtCredit", walletRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NineInchSpotLimitPLSBoughtCredit)
				if err := _NineInchSpotLimitPLS.contract.UnpackLog(event, "BoughtCredit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBoughtCredit is a log parse operation binding the contract event 0x4bc825bd98a36bebb10cd3632627be2dc7455c948a746f80ee19d02c62f9256c.
//
// Solidity: event BoughtCredit(address indexed wallet, uint256 amount)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) ParseBoughtCredit(log types.Log) (*NineInchSpotLimitPLSBoughtCredit, error) {
	event := new(NineInchSpotLimitPLSBoughtCredit)
	if err := _NineInchSpotLimitPLS.contract.UnpackLog(event, "BoughtCredit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NineInchSpotLimitPLSOrderCancelledIterator is returned from FilterOrderCancelled and is used to iterate over the raw logs and unpacked data for OrderCancelled events raised by the NineInchSpotLimitPLS contract.
type NineInchSpotLimitPLSOrderCancelledIterator struct {
	Event *NineInchSpotLimitPLSOrderCancelled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NineInchSpotLimitPLSOrderCancelledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NineInchSpotLimitPLSOrderCancelled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NineInchSpotLimitPLSOrderCancelled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NineInchSpotLimitPLSOrderCancelledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NineInchSpotLimitPLSOrderCancelledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NineInchSpotLimitPLSOrderCancelled represents a OrderCancelled event raised by the NineInchSpotLimitPLS contract.
type NineInchSpotLimitPLSOrderCancelled struct {
	OrderId [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOrderCancelled is a free log retrieval operation binding the contract event 0x5152abf959f6564662358c2e52b702259b78bac5ee7842a0f01937e670efcc7d.
//
// Solidity: event OrderCancelled(bytes32 indexed orderId)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) FilterOrderCancelled(opts *bind.FilterOpts, orderId [][32]byte) (*NineInchSpotLimitPLSOrderCancelledIterator, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _NineInchSpotLimitPLS.contract.FilterLogs(opts, "OrderCancelled", orderIdRule)
	if err != nil {
		return nil, err
	}
	return &NineInchSpotLimitPLSOrderCancelledIterator{contract: _NineInchSpotLimitPLS.contract, event: "OrderCancelled", logs: logs, sub: sub}, nil
}

// WatchOrderCancelled is a free log subscription operation binding the contract event 0x5152abf959f6564662358c2e52b702259b78bac5ee7842a0f01937e670efcc7d.
//
// Solidity: event OrderCancelled(bytes32 indexed orderId)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) WatchOrderCancelled(opts *bind.WatchOpts, sink chan<- *NineInchSpotLimitPLSOrderCancelled, orderId [][32]byte) (event.Subscription, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _NineInchSpotLimitPLS.contract.WatchLogs(opts, "OrderCancelled", orderIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NineInchSpotLimitPLSOrderCancelled)
				if err := _NineInchSpotLimitPLS.contract.UnpackLog(event, "OrderCancelled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderCancelled is a log parse operation binding the contract event 0x5152abf959f6564662358c2e52b702259b78bac5ee7842a0f01937e670efcc7d.
//
// Solidity: event OrderCancelled(bytes32 indexed orderId)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) ParseOrderCancelled(log types.Log) (*NineInchSpotLimitPLSOrderCancelled, error) {
	event := new(NineInchSpotLimitPLSOrderCancelled)
	if err := _NineInchSpotLimitPLS.contract.UnpackLog(event, "OrderCancelled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NineInchSpotLimitPLSOrderCreatedIterator is returned from FilterOrderCreated and is used to iterate over the raw logs and unpacked data for OrderCreated events raised by the NineInchSpotLimitPLS contract.
type NineInchSpotLimitPLSOrderCreatedIterator struct {
	Event *NineInchSpotLimitPLSOrderCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NineInchSpotLimitPLSOrderCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NineInchSpotLimitPLSOrderCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NineInchSpotLimitPLSOrderCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NineInchSpotLimitPLSOrderCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NineInchSpotLimitPLSOrderCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NineInchSpotLimitPLSOrderCreated represents a OrderCreated event raised by the NineInchSpotLimitPLS contract.
type NineInchSpotLimitPLSOrderCreated struct {
	OrderId      [32]byte
	CurrentPrice *big.Int
	TargetPrice  *big.Int
	AmountIn     *big.Int
	TokenIn      common.Address
	TokenOut     common.Address
	User         common.Address
	Slippage     uint16
	Deadline     *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterOrderCreated is a free log retrieval operation binding the contract event 0x99657a932d9c70d2828b20283c6695ec3f56fab0cba81f52b3e59c7cb67b49ac.
//
// Solidity: event OrderCreated(bytes32 indexed orderId, uint256 currentPrice, uint256 targetPrice, uint256 amountIn, address tokenIn, address tokenOut, address indexed user, uint16 slippage, uint256 deadline)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) FilterOrderCreated(opts *bind.FilterOpts, orderId [][32]byte, user []common.Address) (*NineInchSpotLimitPLSOrderCreatedIterator, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _NineInchSpotLimitPLS.contract.FilterLogs(opts, "OrderCreated", orderIdRule, userRule)
	if err != nil {
		return nil, err
	}
	return &NineInchSpotLimitPLSOrderCreatedIterator{contract: _NineInchSpotLimitPLS.contract, event: "OrderCreated", logs: logs, sub: sub}, nil
}

// WatchOrderCreated is a free log subscription operation binding the contract event 0x99657a932d9c70d2828b20283c6695ec3f56fab0cba81f52b3e59c7cb67b49ac.
//
// Solidity: event OrderCreated(bytes32 indexed orderId, uint256 currentPrice, uint256 targetPrice, uint256 amountIn, address tokenIn, address tokenOut, address indexed user, uint16 slippage, uint256 deadline)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) WatchOrderCreated(opts *bind.WatchOpts, sink chan<- *NineInchSpotLimitPLSOrderCreated, orderId [][32]byte, user []common.Address) (event.Subscription, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _NineInchSpotLimitPLS.contract.WatchLogs(opts, "OrderCreated", orderIdRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NineInchSpotLimitPLSOrderCreated)
				if err := _NineInchSpotLimitPLS.contract.UnpackLog(event, "OrderCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderCreated is a log parse operation binding the contract event 0x99657a932d9c70d2828b20283c6695ec3f56fab0cba81f52b3e59c7cb67b49ac.
//
// Solidity: event OrderCreated(bytes32 indexed orderId, uint256 currentPrice, uint256 targetPrice, uint256 amountIn, address tokenIn, address tokenOut, address indexed user, uint16 slippage, uint256 deadline)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) ParseOrderCreated(log types.Log) (*NineInchSpotLimitPLSOrderCreated, error) {
	event := new(NineInchSpotLimitPLSOrderCreated)
	if err := _NineInchSpotLimitPLS.contract.UnpackLog(event, "OrderCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NineInchSpotLimitPLSOrderExpiredIterator is returned from FilterOrderExpired and is used to iterate over the raw logs and unpacked data for OrderExpired events raised by the NineInchSpotLimitPLS contract.
type NineInchSpotLimitPLSOrderExpiredIterator struct {
	Event *NineInchSpotLimitPLSOrderExpired // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NineInchSpotLimitPLSOrderExpiredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NineInchSpotLimitPLSOrderExpired)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NineInchSpotLimitPLSOrderExpired)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NineInchSpotLimitPLSOrderExpiredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NineInchSpotLimitPLSOrderExpiredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NineInchSpotLimitPLSOrderExpired represents a OrderExpired event raised by the NineInchSpotLimitPLS contract.
type NineInchSpotLimitPLSOrderExpired struct {
	OrderId [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOrderExpired is a free log retrieval operation binding the contract event 0x2e775cae5028266ebbe90e46ca5ce1b333eb3c28eef104c52203add626c1ada8.
//
// Solidity: event OrderExpired(bytes32 indexed orderId)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) FilterOrderExpired(opts *bind.FilterOpts, orderId [][32]byte) (*NineInchSpotLimitPLSOrderExpiredIterator, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _NineInchSpotLimitPLS.contract.FilterLogs(opts, "OrderExpired", orderIdRule)
	if err != nil {
		return nil, err
	}
	return &NineInchSpotLimitPLSOrderExpiredIterator{contract: _NineInchSpotLimitPLS.contract, event: "OrderExpired", logs: logs, sub: sub}, nil
}

// WatchOrderExpired is a free log subscription operation binding the contract event 0x2e775cae5028266ebbe90e46ca5ce1b333eb3c28eef104c52203add626c1ada8.
//
// Solidity: event OrderExpired(bytes32 indexed orderId)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) WatchOrderExpired(opts *bind.WatchOpts, sink chan<- *NineInchSpotLimitPLSOrderExpired, orderId [][32]byte) (event.Subscription, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _NineInchSpotLimitPLS.contract.WatchLogs(opts, "OrderExpired", orderIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NineInchSpotLimitPLSOrderExpired)
				if err := _NineInchSpotLimitPLS.contract.UnpackLog(event, "OrderExpired", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderExpired is a log parse operation binding the contract event 0x2e775cae5028266ebbe90e46ca5ce1b333eb3c28eef104c52203add626c1ada8.
//
// Solidity: event OrderExpired(bytes32 indexed orderId)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) ParseOrderExpired(log types.Log) (*NineInchSpotLimitPLSOrderExpired, error) {
	event := new(NineInchSpotLimitPLSOrderExpired)
	if err := _NineInchSpotLimitPLS.contract.UnpackLog(event, "OrderExpired", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NineInchSpotLimitPLSOrderFailedIterator is returned from FilterOrderFailed and is used to iterate over the raw logs and unpacked data for OrderFailed events raised by the NineInchSpotLimitPLS contract.
type NineInchSpotLimitPLSOrderFailedIterator struct {
	Event *NineInchSpotLimitPLSOrderFailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NineInchSpotLimitPLSOrderFailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NineInchSpotLimitPLSOrderFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NineInchSpotLimitPLSOrderFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NineInchSpotLimitPLSOrderFailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NineInchSpotLimitPLSOrderFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NineInchSpotLimitPLSOrderFailed represents a OrderFailed event raised by the NineInchSpotLimitPLS contract.
type NineInchSpotLimitPLSOrderFailed struct {
	OrderId [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOrderFailed is a free log retrieval operation binding the contract event 0xe1bf2a28c083b93b502e4140fe14e357c3d973a7ec3d8517b6022a70bfd35626.
//
// Solidity: event OrderFailed(bytes32 indexed orderId)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) FilterOrderFailed(opts *bind.FilterOpts, orderId [][32]byte) (*NineInchSpotLimitPLSOrderFailedIterator, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _NineInchSpotLimitPLS.contract.FilterLogs(opts, "OrderFailed", orderIdRule)
	if err != nil {
		return nil, err
	}
	return &NineInchSpotLimitPLSOrderFailedIterator{contract: _NineInchSpotLimitPLS.contract, event: "OrderFailed", logs: logs, sub: sub}, nil
}

// WatchOrderFailed is a free log subscription operation binding the contract event 0xe1bf2a28c083b93b502e4140fe14e357c3d973a7ec3d8517b6022a70bfd35626.
//
// Solidity: event OrderFailed(bytes32 indexed orderId)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) WatchOrderFailed(opts *bind.WatchOpts, sink chan<- *NineInchSpotLimitPLSOrderFailed, orderId [][32]byte) (event.Subscription, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _NineInchSpotLimitPLS.contract.WatchLogs(opts, "OrderFailed", orderIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NineInchSpotLimitPLSOrderFailed)
				if err := _NineInchSpotLimitPLS.contract.UnpackLog(event, "OrderFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderFailed is a log parse operation binding the contract event 0xe1bf2a28c083b93b502e4140fe14e357c3d973a7ec3d8517b6022a70bfd35626.
//
// Solidity: event OrderFailed(bytes32 indexed orderId)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) ParseOrderFailed(log types.Log) (*NineInchSpotLimitPLSOrderFailed, error) {
	event := new(NineInchSpotLimitPLSOrderFailed)
	if err := _NineInchSpotLimitPLS.contract.UnpackLog(event, "OrderFailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NineInchSpotLimitPLSOrderFilledIterator is returned from FilterOrderFilled and is used to iterate over the raw logs and unpacked data for OrderFilled events raised by the NineInchSpotLimitPLS contract.
type NineInchSpotLimitPLSOrderFilledIterator struct {
	Event *NineInchSpotLimitPLSOrderFilled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NineInchSpotLimitPLSOrderFilledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NineInchSpotLimitPLSOrderFilled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NineInchSpotLimitPLSOrderFilled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NineInchSpotLimitPLSOrderFilledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NineInchSpotLimitPLSOrderFilledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NineInchSpotLimitPLSOrderFilled represents a OrderFilled event raised by the NineInchSpotLimitPLS contract.
type NineInchSpotLimitPLSOrderFilled struct {
	OrderId        [32]byte
	ExecutionPrice *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterOrderFilled is a free log retrieval operation binding the contract event 0xfec331350fce78ba658e082a71da20ac9f8d798a99b3c79681c8440cbfe77e07.
//
// Solidity: event OrderFilled(bytes32 indexed orderId, uint256 executionPrice)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) FilterOrderFilled(opts *bind.FilterOpts, orderId [][32]byte) (*NineInchSpotLimitPLSOrderFilledIterator, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _NineInchSpotLimitPLS.contract.FilterLogs(opts, "OrderFilled", orderIdRule)
	if err != nil {
		return nil, err
	}
	return &NineInchSpotLimitPLSOrderFilledIterator{contract: _NineInchSpotLimitPLS.contract, event: "OrderFilled", logs: logs, sub: sub}, nil
}

// WatchOrderFilled is a free log subscription operation binding the contract event 0xfec331350fce78ba658e082a71da20ac9f8d798a99b3c79681c8440cbfe77e07.
//
// Solidity: event OrderFilled(bytes32 indexed orderId, uint256 executionPrice)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) WatchOrderFilled(opts *bind.WatchOpts, sink chan<- *NineInchSpotLimitPLSOrderFilled, orderId [][32]byte) (event.Subscription, error) {

	var orderIdRule []interface{}
	for _, orderIdItem := range orderId {
		orderIdRule = append(orderIdRule, orderIdItem)
	}

	logs, sub, err := _NineInchSpotLimitPLS.contract.WatchLogs(opts, "OrderFilled", orderIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NineInchSpotLimitPLSOrderFilled)
				if err := _NineInchSpotLimitPLS.contract.UnpackLog(event, "OrderFilled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderFilled is a log parse operation binding the contract event 0xfec331350fce78ba658e082a71da20ac9f8d798a99b3c79681c8440cbfe77e07.
//
// Solidity: event OrderFilled(bytes32 indexed orderId, uint256 executionPrice)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) ParseOrderFilled(log types.Log) (*NineInchSpotLimitPLSOrderFilled, error) {
	event := new(NineInchSpotLimitPLSOrderFilled)
	if err := _NineInchSpotLimitPLS.contract.UnpackLog(event, "OrderFilled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NineInchSpotLimitPLSOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the NineInchSpotLimitPLS contract.
type NineInchSpotLimitPLSOwnershipTransferredIterator struct {
	Event *NineInchSpotLimitPLSOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NineInchSpotLimitPLSOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NineInchSpotLimitPLSOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NineInchSpotLimitPLSOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NineInchSpotLimitPLSOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NineInchSpotLimitPLSOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NineInchSpotLimitPLSOwnershipTransferred represents a OwnershipTransferred event raised by the NineInchSpotLimitPLS contract.
type NineInchSpotLimitPLSOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*NineInchSpotLimitPLSOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _NineInchSpotLimitPLS.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &NineInchSpotLimitPLSOwnershipTransferredIterator{contract: _NineInchSpotLimitPLS.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *NineInchSpotLimitPLSOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _NineInchSpotLimitPLS.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NineInchSpotLimitPLSOwnershipTransferred)
				if err := _NineInchSpotLimitPLS.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) ParseOwnershipTransferred(log types.Log) (*NineInchSpotLimitPLSOwnershipTransferred, error) {
	event := new(NineInchSpotLimitPLSOwnershipTransferred)
	if err := _NineInchSpotLimitPLS.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NineInchSpotLimitPLSPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the NineInchSpotLimitPLS contract.
type NineInchSpotLimitPLSPausedIterator struct {
	Event *NineInchSpotLimitPLSPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NineInchSpotLimitPLSPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NineInchSpotLimitPLSPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NineInchSpotLimitPLSPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NineInchSpotLimitPLSPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NineInchSpotLimitPLSPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NineInchSpotLimitPLSPaused represents a Paused event raised by the NineInchSpotLimitPLS contract.
type NineInchSpotLimitPLSPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) FilterPaused(opts *bind.FilterOpts) (*NineInchSpotLimitPLSPausedIterator, error) {

	logs, sub, err := _NineInchSpotLimitPLS.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &NineInchSpotLimitPLSPausedIterator{contract: _NineInchSpotLimitPLS.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *NineInchSpotLimitPLSPaused) (event.Subscription, error) {

	logs, sub, err := _NineInchSpotLimitPLS.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NineInchSpotLimitPLSPaused)
				if err := _NineInchSpotLimitPLS.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) ParsePaused(log types.Log) (*NineInchSpotLimitPLSPaused, error) {
	event := new(NineInchSpotLimitPLSPaused)
	if err := _NineInchSpotLimitPLS.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NineInchSpotLimitPLSTransferCreditIterator is returned from FilterTransferCredit and is used to iterate over the raw logs and unpacked data for TransferCredit events raised by the NineInchSpotLimitPLS contract.
type NineInchSpotLimitPLSTransferCreditIterator struct {
	Event *NineInchSpotLimitPLSTransferCredit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NineInchSpotLimitPLSTransferCreditIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NineInchSpotLimitPLSTransferCredit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NineInchSpotLimitPLSTransferCredit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NineInchSpotLimitPLSTransferCreditIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NineInchSpotLimitPLSTransferCreditIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NineInchSpotLimitPLSTransferCredit represents a TransferCredit event raised by the NineInchSpotLimitPLS contract.
type NineInchSpotLimitPLSTransferCredit struct {
	From   common.Address
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTransferCredit is a free log retrieval operation binding the contract event 0xbfa5afa9ccfabe79b0b21f2a9d778cf773b963e00307dd68c96abc3a30c5d3be.
//
// Solidity: event TransferCredit(address indexed from, address indexed to, uint256 amount)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) FilterTransferCredit(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*NineInchSpotLimitPLSTransferCreditIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _NineInchSpotLimitPLS.contract.FilterLogs(opts, "TransferCredit", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &NineInchSpotLimitPLSTransferCreditIterator{contract: _NineInchSpotLimitPLS.contract, event: "TransferCredit", logs: logs, sub: sub}, nil
}

// WatchTransferCredit is a free log subscription operation binding the contract event 0xbfa5afa9ccfabe79b0b21f2a9d778cf773b963e00307dd68c96abc3a30c5d3be.
//
// Solidity: event TransferCredit(address indexed from, address indexed to, uint256 amount)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) WatchTransferCredit(opts *bind.WatchOpts, sink chan<- *NineInchSpotLimitPLSTransferCredit, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _NineInchSpotLimitPLS.contract.WatchLogs(opts, "TransferCredit", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NineInchSpotLimitPLSTransferCredit)
				if err := _NineInchSpotLimitPLS.contract.UnpackLog(event, "TransferCredit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferCredit is a log parse operation binding the contract event 0xbfa5afa9ccfabe79b0b21f2a9d778cf773b963e00307dd68c96abc3a30c5d3be.
//
// Solidity: event TransferCredit(address indexed from, address indexed to, uint256 amount)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) ParseTransferCredit(log types.Log) (*NineInchSpotLimitPLSTransferCredit, error) {
	event := new(NineInchSpotLimitPLSTransferCredit)
	if err := _NineInchSpotLimitPLS.contract.UnpackLog(event, "TransferCredit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NineInchSpotLimitPLSUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the NineInchSpotLimitPLS contract.
type NineInchSpotLimitPLSUnpausedIterator struct {
	Event *NineInchSpotLimitPLSUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NineInchSpotLimitPLSUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NineInchSpotLimitPLSUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NineInchSpotLimitPLSUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NineInchSpotLimitPLSUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NineInchSpotLimitPLSUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NineInchSpotLimitPLSUnpaused represents a Unpaused event raised by the NineInchSpotLimitPLS contract.
type NineInchSpotLimitPLSUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) FilterUnpaused(opts *bind.FilterOpts) (*NineInchSpotLimitPLSUnpausedIterator, error) {

	logs, sub, err := _NineInchSpotLimitPLS.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &NineInchSpotLimitPLSUnpausedIterator{contract: _NineInchSpotLimitPLS.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *NineInchSpotLimitPLSUnpaused) (event.Subscription, error) {

	logs, sub, err := _NineInchSpotLimitPLS.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NineInchSpotLimitPLSUnpaused)
				if err := _NineInchSpotLimitPLS.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_NineInchSpotLimitPLS *NineInchSpotLimitPLSFilterer) ParseUnpaused(log types.Log) (*NineInchSpotLimitPLSUnpaused, error) {
	event := new(NineInchSpotLimitPLSUnpaused)
	if err := _NineInchSpotLimitPLS.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
